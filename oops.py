# -*- coding: utf-8 -*-
"""OOPs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vt1eK2iTcEar5O-lEnNyhmPOP0RN8sEz
"""



"""1. What is Object-Oriented Programming (OOP)
->Object-Oriented Programming (OOP) is a programming paradigm that revolves around the concept of objects and classes. It organizes software design around data or objects rather than functions and logic.
2. What is a class in OOP
 ->A class is a blueprint or template that defines the properties and behavior of an object. Like we are different objects of class human being.
3. What is an object in OOP
 ->An object is an instance of a class, and it has its own set of attributes (data) and methods (functions). Objects are the building blocks of OOP, and they represent real-world entities or concepts.
4. What is the difference between abstraction and encapsulation
 ->Abstraction is the concept of hiding complex implementation and hiding unneeded details and exposing the required.
  Encapsulation, on the other hand, means hiding something building of data and methods of a class.
  Access modifier> Public,Private,Protected
5. What are dunder methods in Python
 ->Dunder methods, also known as magic methods, are special methods in Python classes that are surrounded by double underscores (i.e., __method__). These methods are used to emulate the behavior of built-in types and to provide a way to customize the behavior of objects.
6. Explain the concept of inheritance in OOP
 ->Inheritance is a mechanism in OOP that allows one class to inherit the properties and behavior of another class. The class that is being inherited from is called the parent or superclass, while the class that is doing the inheriting is called the child or subclass.
7. What is polymorphism in OOP
  ->Polymorphism is made with two parts Poly+Morphism poly means many and morphism means forms.Polymorphism refers to an object taking several forms depending on the methods/data.
8. How is encapsulation achieved in Python
  ->Encapsulation in Python is achieved by using classes and objects, where data is bundled with methods that operate on that data. Access modifiers such as public, private, and protected are not available in Python, but encapsulation can be achieved through the use of single and double underscores.
9. What is a constructor in Python
  ->A constructor in Python is a special method that is called when an object is created from a class. It is used to initialize the attributes of the class.
10. What are class and static methods in Python
  ->Class methods are methods that are bound to a class rather than an instance of the class. Static methods, on the other hand, are methods that belong to a class rather than an instance of the class, and they do not have access to the class or instance variables.
11. What is method overloading in Python
 ->Method overloading is a feature in some programming languages that allows multiple methods with the same name to be defined, but with different parameter lists. Python does not support method overloading in the classical sense, but it can be achieved through the use of optional parameters or the *args and **kwargs syntax.
12. What is method overriding in OOP
 ->Method overriding is a feature in OOP that allows a subclass to provide a different implementation of a method that is already defined in its superclass.
13.  What is a property decorator in Python
 ->A property decorator in Python is a special type of decorator that allows a method to be called like an attribute. It is used to customize access to instance data.
14. Why is polymorphism important in OOP
 ->Polymorphism is important in OOP because it allows objects of different classes to be treated as objects of a common superclass, enabling more flexibility and generic code.
15. What is an abstract class in Python
 ->An abstract class in Python is a class that cannot be instantiated and is designed to be inherited by other classes. It typically contains one or more abstract methods, which are methods that are declared but not implemented.
16. What are the advantages of OOP
  ->The advantages of OOP include code reusability, easier maintenance, improved readability, and better organization.
17. What is the difference between a class variable and an instance variable
 ->A class variable is a variable that is shared by all instances of a class, while an instance variable is a variable that is unique to each instance of a class.
18. What is multiple inheritance in Python1
 ->Multiple inheritance in Python is a feature that allows a class to inherit from multiple superclasses.
19. Explain the purpose of ‘’__str__’ and ‘__repr__’ ‘ methods in Python
 ->The __str__ method is used to return a string representation of an object that is human-readable, while the
20. What is the significance of the ‘super()’ function in Python1
  ->The super() function in Python is used to access the methods and properties of a parent class. It returns a proxy object that allows you to call methods of the parent class.
21.  What is the significance of the __del__ method in Python1
  ->The __del__ method in Python is a special method that is called when an object is about to be destroyed. It is also known as the destructor method. However, due to Python's garbage collection mechanism, the __del__ method is not always reliable.
22. What is the difference between @staticmethod and @classmethod in Python
 ->@staticmethod is used to define a method that belongs to a class, rather than an instance of the class. It does not have access to the class or instance variables.
@classmethod is used to define a method that belongs to a class, rather than an instance of the class. It has access to the class variables, but not the instance variables.
23.  How does polymorphism work in Python with inheritance1
 ->Polymorphism in Python works through method overriding, where a subclass provides a different implementation of a method that is already defined in its superclass. This allows objects of different classes to be treated as objects of a common superclass.
24.  What is method chaining in Python OOP
 ->Method chaining is a technique in Python OOP where multiple methods are called on the same object in a single statement. This is achieved by having each method return the object itself (self).
25.  What is the purpose of the __call__ method in Python?
 ->The __call__ method in Python is a special method that allows an object to be called like a function. When an object is called, Python internally calls its __call__ method.





  

 `  
       




"""

#1Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dogthat overrides the speak() method to print "Bark!".
class Animal:
    def speak(self):
        print("The animal makes a sound.")
class Dog:
  def speaks(self):
    print("Barks!")

dog= Dog()
dog.speaks()

#2 Write a program to create an abstract class Shape with a method area(). Derive classes Circle and Rectanglefrom it and implement the area() method in both.
from abc import ABC, abstractmethod
import math

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * (self.radius ** 2)

class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

circle= Circle(5)
circle.area()

rectangle= Rectangle(4,5)
rectangle.area()

#3 Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Carand further derive a class ElectricCar that adds a battery attribute.
class Vehicle:
    def __init__(self, type):
        self.type = type

class Car(Vehicle):
    def __init__(self, type, brand):
        super().__init__(type)
        self.brand = brand

class ElectricCar(Car):
    def __init__(self, type, brand, battery_capacity):
        super().__init__(type, brand)
        self.battery_capacity = battery_capacity

electric_car = ElectricCar("Sedan", "Tesla", 75)
electric_car.type

electric_car.brand

electric_car.battery_capacity

#.4 Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Carand further derive a class ElectricCar that adds a battery attribute.
# same as problem 3
class Vehicle:
    def __init__(self, type):
        self.type = type

class Car(Vehicle):
    def __init__(self, type, brand):
        super().__init__(type)
        self.brand = brand

class ElectricCar(Car):
    def __init__(self, type, brand, battery_capacity):
        super().__init__(type, brand)
        self.battery_capacity = battery_capacity

electric_car = ElectricCar("Sedan", "Tesla", 75)
electric_car.type

electric_car.brand

electric_car.battery_capacity

#5 Write a program to demonstrate encapsulation by creating a class BankAccount with private attributes balance and methods to deposit, withdraw, and check balance.
class BankAccount:
    def __init__(self, balance=0):
        self.__balance = balance

    def deposit(self, amount):
        self.__balance += amount

    def withdraw(self, amount):
        if amount > self.__balance:
            print("Insufficient funds.")
        else:
            self.__balance -= amount

    def check_balance(self):
        return self.__balance

Cust = BankAccount(1000)
Cust.deposit(500)

Cust.check_balance()

Cust.withdraw(200)

Cust.check_balance()

#6 Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar and Piano that implement their own version of play().
class Instrument:
    def play(self):
        pass

class Guitar(Instrument):
    def play(self):
        print("Playing the guitar.")

class Piano(Instrument):
    def play(self):
        print("Playing the piano.")

def play_instrument(instrument):
    instrument.play()

guitar = Guitar()
play_instrument(guitar)

piano = Piano()
play_instrument(piano)

#7 Create a class MathOperations with a class method add_numbers() to add two numbers and a static method subtract_numbers() to subtract two numbers.
class MathOperations:
    @classmethod
    def add_numbers(cls, a, b):
        return a + b

    @staticmethod
    def subtract_numbers(a, b):
        return a - b

MathOperations.add_numbers(5, 3)

MathOperations.subtract_numbers(10, 4)

#8 Implement a class Person with a class method to count the total number of persons created
class Person:
    count = 0

    def __init__(self, name):
        self.name = name
        Person.count += 1
    @classmethod
    def get_count(cls):
        return cls.count

person1 = Person("Shivendra")
person2 = Person("Yash")

Person.get_count()

#9 Write a class Fraction with attributes numerator and denominator. Override the str method to display the fraction as "numerator/denominator".
class Fraction:
    def __init__(self, numerator, denominator):
        self.numerator = numerator
        self.denominator = denominator

    def __str__(self):
        return f"{self.numerator}/{self.denominator}"

fraction = Fraction(3, 4)

print(fraction)

#10 Demonstrate operator overloading by creating a class Vector and overriding the add method to add two vectors
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)
    def __str__(self):
        return f"({self.x}, {self.y})"

vector1 = Vector(2, 3)
vector2 = Vector(4, 5)

vector3 = vector1 + vector2
print(vector3)

#11 Create a class Person with attributes name and age. Add a method greet() that prints "Hello, my name is {name} and I am {age} years old."
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def greet(self):
         print(f"Hello, my name is {self.name} and I am {self.age} years old.")

person = Person("Shivendra", 20)
person.greet()

#12 Implement a class Student with attributes name and grades. Create a method average_grade() to compute the average of the grades.
class Student:
    def __init__(self, name, grades):
        self.name = name
        self.grades = grades
    def average_grade(self):
        return sum(self.grades) / len(self.grades)

student = Student("Shivendra", [90, 85, 95])
print(student.average_grade())

#13 Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the area

class Rectangle:
    def __init__(self):
        self.length = 0
        self.width = 0

    def set_dimensions(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

rectangle = Rectangle()
rectangle.set_dimensions(4, 5)

rectangle.area()

#14 Create a class Employee with a method calculate_salary() that computes the salary based on hours worked and hourly rate. Create a derived class Manager that adds a bonus to the salary.
class Employee:
    def __init__(self, name, hourly_rate):
        self.name = name
        self.hourly_rate = hourly_rate
        self.hours_worked = 0

    def calculate_salary(self):
        return self.hourly_rate * self.hours_worked

class Manager(Employee):
    def __init__(self, name, hourly_rate, bonus):
        super().__init__(name, hourly_rate)
        self.bonus = bonus

    def calculate_salary(self):
        return super().calculate_salary() + self.bonus

employee = Employee("Shivendra", 20)
employee.hours_worked = 40
employee.calculate_salary()

manager = Manager("Yash", 30, 1000)
manager.hours_worked = 40
manager.calculate_salary()

#15 Create a class Product with attributes name, price, and quantity. Implement a method total_price() that calculates the total price of the product.
class Product:
    def __init__(self, name, price, quantity):
        self.name = name
        self.price = price
        self.quantity = quantity

    def total_price(self):
        return self.price * self.quantity

product = Product("Laptop", 1000, 2)
product.total_price()

#16 Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that implement the sound() method.
from abc import ABC
abstractmethod

class Animal(ABC):
    @abstractmethod
    def sound(self):
        pass

class Cow(Animal):
    def sound(self):
        return "Moo!"

class Sheep(Animal):
    def sound(self):
        return "Baa!"

cow = Cow()
cow.sound()

sheep = Sheep()
sheep.sound()

#17. Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that returns a formatted string with the book's details.
class Book:
    def __init__(self, title, author, year_published):
        self.title = title
        self.author = author
        self.year_published = year_published

    def get_book_info(self):
        return f"'{self.title}' by {self.author}, published in {self.year_published}"

book = Book("Bhagavat Geeta", "Maharishi Veda Vyasa", "200CE")

book.get_book_info()

#18 Create a class House with attributes address and price. Create a derived class Mansion that adds an attribute number_of_rooms.
class House:
    def __init__(self, address, price):
        self.address = address
        self.price = price
class Mansion(House):
    def __init__(self, address, price, number_of_rooms):
        super().__init__(address, price)
        self.number_of_rooms = number_of_rooms

mansion = Mansion("Etawah", 1000000, 10)
print(f"Address: {mansion.address}, Price: {mansion.price}, Number of Rooms: {mansion.number_of_rooms}")

